// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: dummies.sql

package generated

import (
	"context"

	"github.com/google/uuid"
)

const createDummy = `-- name: CreateDummy :one
INSERT INTO dummies (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateDummy(ctx context.Context, name string) (Dummy, error) {
	row := q.db.QueryRowContext(ctx, createDummy, name)
	var i Dummy
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllDummies = `-- name: GetAllDummies :many
SELECT id, name, created_at, updated_at
FROM dummies
`

func (q *Queries) GetAllDummies(ctx context.Context) ([]Dummy, error) {
	rows, err := q.db.QueryContext(ctx, getAllDummies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dummy
	for rows.Next() {
		var i Dummy
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDummy = `-- name: GetDummy :one
SELECT id, name, created_at, updated_at
FROM dummies
WHERE id = $1
`

func (q *Queries) GetDummy(ctx context.Context, id uuid.UUID) (Dummy, error) {
	row := q.db.QueryRowContext(ctx, getDummy, id)
	var i Dummy
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
